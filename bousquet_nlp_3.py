# -*- coding: utf-8 -*-
"""Bousquet_NLP_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F_YC2TtNBbQuy1qBO_dG1XGkii9Cuxly
"""

import keras
import tensorflow as tf
import numpy as np

filepath = "/content/lordoftherings.txt"
with open(filepath) as f:
  lotr_text = f.read()

lotr_text

tokenizer = keras.preprocessing.text.Tokenizer(char_level=True)
tokenizer.fit_on_texts(lotr_text)

tokenizer.texts_to_sequences(["Gandalf"])

tokenizer.sequences_to_texts([[16, 4, 6, 11, 4, 12, 15]])

max_id = len(tokenizer.word_index)
dataset_size = tokenizer.document_count
dataset_size
[encoded] = np.array(tokenizer.texts_to_sequences([lotr_text])) -1

encoded

train_size = dataset_size * 90 // 100
train_size

dataset = tf.data.Dataset.from_tensor_slices(encoded[:train_size])
n_steps = 100
window_length = n_steps + 1
dataset = dataset.window(window_length, shift=1, drop_remainder=True)
dataset = dataset.flat_map(lambda window: window.batch(window_length))
batch_size = 32
dataset = dataset.shuffle(10000).batch(batch_size)
dataset = dataset.map(lambda windows: (windows[:, :-1], windows[:, 1:]))
dataset = dataset.map(lambda X_batch, Y_batch: (tf.one_hot(X_batch, depth=max_id), Y_batch))
dataset = dataset.prefetch(1)

model = keras.models.Sequential([
  keras.layers.GRU(128, return_sequences=True, input_shape=[None, max_id],
                   dropout=0.2, recurrent_dropout=0.2),
  keras.layers.GRU(128, return_sequences=True,
                   dropout=0.2, recurrent_dropout=0.2),
  keras.layers.TimeDistributed(keras.layers.Dense(max_id, activation="softmax"))
])
model.compile(loss="sparse_categorical_crossentropy", optimizer="adam")

history = model.fit(dataset, epochs=1)

"""# Left overnight, came back and said it the runtime was disconnected, that sucks :P"""

def preprocess(texts):
  X = np.array(tokenizer.texts_to_sequences(texts)) - 1
  return tf.one_hot(X, max_id)

X_new = preprocess(["How are yo"])
pred_X = model.predict(X_new)
Y_pred = np.argmax(pred_X, axis=-1)
tokenizer.sequences_to_texts(Y_pred+1)[0][-1] # 1st sentence, last char

(Y_pred+1)[0][-1]

def next_char(text, temperature=1):
  X_new = preprocess([text])
  y_probs = model.predict(X_new)[0, -1:, :]
  rescaled_logits = tf.math.log(y_prob) / temperature
  char_id = tf.random.categorical(rescaled_logits, num_samples=1) + 1
  return tokenizer.sequences_to_texts(char_id.numpy())[0]

next_char("How are yo", temperature=1)

def complete_text(text, n_chars=50, temperature=1):
  for _ in range(n_chars):
    text += next_char(text, temperature)
  return text

print(complete_text('o', temperature=.1)